<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <style>
        /* html is what control text color  */
        body,
        html {
            height: 100%;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(to bottom, #007bff, #0056b3);
            color: rgb(22, 21, 21);
            font-family: Arial, sans-serif;
        }

        .chat-container {
            width: 755px;
            height: 75%;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            display: flex;
            overflow: hidden;
            position: relative;
        }

        .logout-button {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 10px 20px;
            border: none;
            background-color: #ff4d4d;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .logout-button:hover {
            background-color: #cc0000;
        }

        .user-list-container {
            width: 25%;
            border-right: 1px solid #ccc;
            padding: 10px;
            overflow-y: auto;
        }

        .chat-content-container {
            width: 75%;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        #publicChat {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            border-bottom: 1px solid #ccc;
        }

        .input-container {
            display: flex;
            padding: 10px;
            border-top: 1px solid #290f0f;
        }

        #messageInput {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }

        #sendButton {
            padding: 10px 20px;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }

        #sendButton:hover {
            background-color: #0056b3;
        }

        .message {
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
        }

        .timestamp {
            font-size: 0.8em;
            color: #888;
            margin-left: 10px;
        }

        .user {
            margin-bottom: 5px;
        }

        .online {
            color: green;
            font-weight: bold;
        }

        .offline {
            color: red;
            font-weight: bold;
        }

        .system-message {
            color: #888;
            font-style: italic;
        }
    </style>
</head>

<body>
    <div class="chat-container">
        <div class="user-list-container" id="userList"></div>
        <div class="chat-content-container">
            <div id="publicChat"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type your message here">
                <button id="sendButton">Send</button>
            </div>
        </div>
    </div>
    <button class="logout-button" onclick="logout()">Logout</button>

    <script>
        const ws = new WebSocket(`ws://${window.location.host}/?username=${encodeURIComponent(new URLSearchParams(window.location.search).get('username'))}`);

        ws.onopen = () => {
            console.log('WebSocket connection established');
        };

        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.type === 'message') {
                displayMessage(data);
            } else if (data.type === 'userList') {
                displayUserList(data.data);
            } else if (data.type === 'pastMessages') {
                data.data.forEach(msg => {
                    displayMessage(msg);
                });
            } else if (data.type === 'system') {
                displaySystemMessage(data);
            }
        };

        ws.onerror = (error) => {
            console.error('WebSocket error:', error);
        };

        ws.onclose = () => {
            console.log('WebSocket connection closed');
        };

        function displayMessage(message) {
            const chat = document.getElementById('publicChat');
            const messageElement = document.createElement('div');
            messageElement.className = 'message';
            const timestamp = new Date(message.timestamp).toLocaleString();
            messageElement.innerHTML = `<span>${message.username}: ${message.data}</span><span class="timestamp">${timestamp}</span>`;
            chat.appendChild(messageElement);
            scrollToBottom();
        }

        function displaySystemMessage(message) {
            const chat = document.getElementById('publicChat');
            const messageElement = document.createElement('div');
            messageElement.className = 'system-message';
            const timestamp = new Date(message.timestamp).toLocaleString();
            messageElement.innerHTML = `<span>${message.data}</span><span class="timestamp">${timestamp}</span>`;
            chat.appendChild(messageElement);
            scrollToBottom();
        }

        function displayUserList(users) {
            const userList = document.getElementById('userList');
            userList.innerHTML = '';
            users.forEach(user => {
                const userElement = document.createElement('div');
                userElement.className = 'user';
                userElement.textContent = `${user.username} (${user.online ? 'Online' : 'Offline'})`;
                userElement.classList.add(user.online ? 'online' : 'offline');
                userList.appendChild(userElement);
            });
        }

        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            if (message) {
                const username = new URLSearchParams(window.location.search).get('username');
                ws.send(JSON.stringify({ type: 'message', username, data: message }));
                messageInput.value = '';
            } else {
                alert('Message cannot be empty');
            }
        }

        function scrollToBottom() {
            const chat = document.getElementById('publicChat');
            chat.scrollTop = chat.scrollHeight;
        }

        function logout() {
            window.location.href = '/logout';
        }

        document.getElementById('sendButton').addEventListener('click', sendMessage);
    </script>
</body>

</html>