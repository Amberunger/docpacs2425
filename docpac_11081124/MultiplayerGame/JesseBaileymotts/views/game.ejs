<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <link rel='icon' href='/favicon.ico' type='image/x-icon'>
    <link rel='stylesheet' href='/style.css'>
    <title>SplatoonD</title>
</head>
<body>
    <!-- Splatoon 2D -->
    <h1>SplatoonD</h1>
    <!-- Game Creation -->
    <button class='menuItems' id='newGame'>New Game</button>
    <button class='menuItems' id='joinGame'>Join Game</button>
    <form id='gameList'>
        <label for='code'>Game Code:</label>
        <select id='code'>
            <option id='defOpt' value='' disabled selected>Select a Game</option>
        </select>
    </form>
    <div id='divider'></div>
    <!-- Game Information -->
    <button class='menuItems' id='startGame'>Start Game</button>
    <div id='gameInfo'>
        <div id='clock'></div>
        <div id='players'></div>
        <div id='winner'></div>
    </div>    

    <!-- Game Board -->
    <div id='board'></div>
    <!-- JS Code -->
    <script>
        //// HTML Elements
        // In order of which they appear
        const newGame = document.getElementById('newGame');
        const joinGame = document.getElementById('joinGame');
        const gameList = document.getElementById('gameList');
        const defOpt = document.getElementById('defOpt');
        const code = document.getElementById('code');
        const startGame = document.getElementById('startGame');
        const gameInfo = document.getElementById('gameInfo');
        const clock = document.getElementById('clock');
        const players = document.getElementById('players');
        const winner = document.getElementById('winner');
        const board = document.getElementById('board');
        
        //// Splatoon 2D Variables
        // It is poor practice to make the websocket like this. However my dearest little webfiends, it okay
        let ws = new WebSocket('ws://localhost:9090');
        let clientID = null;
        let gameID = null;
        let pColor = null;
        let timer = null;
        let gameEnd = false;
        // A compare function for proper score sorting
        let compare = (a, b) => {
            return a - b;
        };

        //// HTML Events
        // On clicking join game...
        joinGame.addEventListener('click', (e) => {
            // If there is no gameID, assign it to the code input's value
            if (gameID === null) {
                gameID = (code.value).toUpperCase();
            };
            // Create the join payload
            const payload = {
                'method': 'join',
                'clientID': clientID,
                'gameID': gameID
            };
            // Stringify and send the join payload
            ws.send(JSON.stringify(payload));
        });
        // On clicking new game...
        newGame.addEventListener('click', (e) => {
            // Create the create payload
            const payload = {
                'method': 'create',
                'clientID': clientID
            };
            // Stringify and send the create payload
            ws.send(JSON.stringify(payload));
        });
        // On clicking start game...
        startGame.addEventListener('click', (e) => {
            // Create the start payload
            const payload = {
                'method': 'start',
                'clientID': clientID,
                // Where the client's ID in game.clients, set the number to the player
                'player': game.clients.find((c) => c.clientID === clientID).player,
                'gameID': gameID
            };
            // Stringify and send the start payload
            ws.send(JSON.stringify(payload));
        });
        // On recieving a websocket message...
        ws.onmessage = (message) => {
            const response = JSON.parse(message.data);
            // If the method is connect...
            if (response.method === 'connect') {
                // Assign and relay the client ID
                clientID = response.clientID;
                // For each game in the games object...
                Object.keys(response.games).forEach((g) => {
                    // Create an option element
                    const option = document.createElement('option');
                    // Assign the game ID to the value and text
                    option.value = g;
                    option.text = g;
                    // Append it to the code select
                    code.appendChild(option);
                });
                // If there are games...
                if (response.games.length !== 0) {
                    // Hide the default option
                    defOpt.style.display = 'none';
                };
            };
            // If the method is disconnect...
            if (response.method === 'disconnect') {
                // Remove the player div with that client's ID
                player.removeChild(document.getElementById(response.clientID));
            };
            // If the method is create...
            if (response.method === 'create') {
                // Assign and relay the game ID
                gameID = response.game.id;
                // Create an option element
                const option = document.createElement('option');
                // Assign the game ID to the value and text
                option.value = gameID;
                option.text = gameID;
                option.selected = true;
                // Append it to the code select
                code.appendChild(option);
                // Set the option to the selected option in the gameList form
            };
            // If the method is join...
            if (response.method === 'join') {
                // Set the text of the clock div to the remaining time
                clock.innerText = `Time: ${response.game.time}`;
                clock.style.display = 'inline-block';
                // Dislpay the start game button
                startGame.style.display = 'inline-block';
                // If the game has less than two clients...
                if (response.game.clients.length < 2) {
                    // Disable the start game button
                    startGame.disabled = true;
                // Else...
                } else {
                    // Enable the start game button
                    startGame.disabled = false;
                };
                // Assign the game
                game = response.game;
                // While the players div has elements, remove the first element
                while (players.firstChild) players.removeChild(players.firstChild);
                // For each client in the game...
                game.clients.forEach((c) => {
                    // Create a div element, style it, and add into it the client ID
                    const div = document.createElement('div');
                    div.id = c.clientID;
                    div.style.background = c.color;
                    div.className = 'player';
                    div.textContent = `${c.player}: ${c.score}`;
                    // If the client's ID matches the current client, their player color is the client's color
                    if (c.clientID === clientID) pColor = c.color;
                    // Append the client's div to the players div
                    players.appendChild(div);
                });
                const grid = `repeat(${Math.min(3, game.clients.length)}, 1fr)`;
                players.style.gridTemplateColumns = grid;
                // While the board div has elements, remove the first element
                while (board.firstChild) board.removeChild(board.firstChild);
                // Start i at 0. While i is less than the game boxes, increment i by 1 and...
                for (let i = 0; i < game.boxes; i++) {
                    // Create a button element and assign an ID and Tag
                    const box = document.createElement('button')
                    box.id = 'b'+(i+1);
                    box.tag = i+1;
                    box.className = 'box';
                    box.disabled = true;
                    // Style the button
                    box.textContent = i+1;
                    // Add clicking functionality to the button
                    box.addEventListener('click', (e) => {
                        // Set the clicked box to the player color
                        box.style.background = pColor;
                        // Create the play payload
                        const payload = {
                            'method': 'play',
                            'clientID': clientID,
                            'gameID': gameID,
                            'boxID': box.tag,
                            'color': pColor
                        }
                        // Stringify and send the play payload
                        ws.send(JSON.stringify(payload));
                    });
                    // Append the box to the board
                    board.appendChild(box);
                    // If the boxes divided by the square root of itself can divide i plus one with no remainder, break
                    // Results in a 8 x 8 grid if there are 64 boxes
                    // If the total boxes are increased, it must be exponentially to result in an evenly distributed and, thus, square grid
                    // For example, a 12 x 12 grid would be 144 boxes. A 20 x 20 grid would be 400
                    if (((i + 1) % (game.boxes / Math.sqrt(game.boxes))) === 0) board.appendChild(document.createElement('br'));
                };
            };
            // If the method is update...
            if (response.method === 'update') {
                // If the game has ended, return
                if (gameEnd === true) return;
                // Set allBoxes to all buttons within the board
                const allBoxes = document.querySelectorAll('#board button');
                // For each box, set the box to enabled
                allBoxes.forEach((box) => box.disabled = false);
                const game = response.game;
                // Update the text of the clock div to the current game time
                clock.innerText = `Time: ${game.time}`;
                // For each client in the game...
                game.clients.forEach((c) => {
                    // If the player div exists...
                    if (document.getElementById(c.clientID)) {
                        // Set the playerBox constant equal to that client's ID
                        const playerBox = document.getElementById(c.clientID)
                        // Update the text content with that player's score
                        playerBox.textContent = `${c.player}: ${c.score}`;
                    };
                });
                // If there is no game state, make one
                if (!game.state) game.state = {};
                // For boxes of the game's state...
                for (const b of Object.keys(game.state)) {
                    // Set color to the color of said box
                    const color = game.state[b];
                    // Set boxObj to said box on the board
                    const boxObj = document.getElementById('b' + b);
                    // Set the boxObj's background color to the color gotten
                    boxObj.style.backgroundColor = color;
                };
                // If the game's time is less than or equal to 0...
                if (game.time <= 0) {
                    if (gameEnd === false) {
                        // // Set allBoxes to all buttons within the board
                        // const allBoxes = document.querySelectorAll('#board button');
                        // For each box, set the box to disabled
                        allBoxes.forEach((box) => box.disabled = true);
                        // Let scores equal an empty array
                        let scores = [];
                        // For each client in the game... 
                        game.clients.forEach((c) => {
                            // Push their score to scores
                            scores.push(c.score);
                        });
                        // Sort scores with the compare functions
                        scores.sort(compare);
                        // 
                        game.clients.forEach((c) => {
                            const div = document.createElement('div');
                            div.id = c.player;
                            div.textContent = c.player;
                            div.style.width = '4rem';
                            div.style.color = c.color;
                            winner.appendChild(div);
                            console.log(div);
                            players.style.display = 'none';
                        });
                        gameEnd = true;
                    };
                };
            };
        };
    </script>
</body>
</html>